// Backward-compat support -*- C++ -*-

// Copyright (C) 2001-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/*
 * Copyright (c) 1998
 * Silicon Graphics Computer Systems, Inc.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Silicon Graphics makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

// WARNING: The classes defined in this header are DEPRECATED.  This
// header is defined in section D.7.1 of the C++ standard, and it
// MAY BE REMOVED in a future standard revision.  One should use the
// header <sstream> instead.

/** @file strstream
 *  This is a Standard C++ Library header.
 */

#ifndef _BACKWARD_STRSTREAM
#define _BACKWARD_STRSTREAM

#include <backward/backward_warning.h>
#include <iosfwd>
#include <ios>
#include <istream>
#include <ostream>

namespace std _GLIBCXX_VISIBILITY(default)
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  // Class strstreambuf, a streambuf class that manages an array of char.
  // Note that this class is not a template.
  class strstreambuf : public basic_streambuf<char, char_traits<char> >
  {
  public:
    // Types.
    typedef char_traits<char>              _Traits;
    typedef basic_streambuf<char, _Traits> _Base;

  public:
    // Constructor, destructor
#if __cplusplus >= 201103L
    strstreambuf() : strstreambuf(0) { }
    explicit strstreambuf(streamsize __initial_capacity);
#else
    explicit strstreambuf(streamsize __initial_capacity = 0);
#endif
    strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));

    strstreambuf(char* __get, streamsize __n, char* __put = 0) throw ();
    strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0) throw ();
    strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0) throw ();

    strstreambuf(const char* __get, streamsize __n) throw ();
    strstreambuf(const signed char* __get, streamsize __n) throw ();
    strstreambuf(const unsigned char* __get, streamsize __n) throw ();

    virtual ~strstreambuf();

#if __cplusplus >= 201103L
    strstreambuf(strstreambuf&& __rhs) noexcept
    : _Base(__rhs), _M_alloc_fun(__rhs._M_alloc_fun),
      _M_free_fun(__rhs._M_free_fun), _M_dynamic(__rhs._M_dynamic),
      _M_frozen(__rhs._M_frozen), _M_constant(__rhs._M_constant)
    {
      __rhs.setg(nullptr, nullptr, nullptr);
      __rhs.setp(nullptr, nullptr);
    }

    strstreambuf&
    operator=(strstreambuf&& __rhs) noexcept
    {
      if (_M_dynamic && !_M_frozen)
	_M_free(eback());
      _Base::operator=(static_cast<const _Base&>(__rhs));
      _M_alloc_fun = __rhs._M_alloc_fun;
      _M_free_fun = __rhs._M_free_fun;
      _M_dynamic = __rhs._M_dynamic;
      _M_frozen = __rhs._M_frozen;
      _M_constant = __rhs._M_constant;
      __rhs.setg(nullptr, nullptr, nullptr);
      __rhs.setp(nullptr